(function () {
  'use strict';

  const dropdown_menu = (selection, props) => {
    const {
      options,
      onOptionClicked
    } = props;
    
    let select = selection.selectAll('select').data([null]);
    select = select.enter().append('select')
      .merge(select)
    		.on('change', function() {
      		onOptionClicked(this.value);
    	});
    
    const option = select.selectAll('option').data(options);
    option.enter().append('option')
    	.merge(option)
    		.attr('value',d => d)
    		.text(d => d);
  };

  const bar = (selection, props) => {
   const {
     margin,
     height,
     width,
     data,
     xValue,
     yValue,
     title,
     xAxisLabel,
     yAxisLabel
   } = props;
    
    //setting size of chart element
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    //sort bars via quality ranking
    data.sort(function(b, a) {
      return b.quality - a.quality;
    });
    
    //defining scales
    const yScale = d3.scaleLinear()
    	.domain([0,d3.max(data, yValue)])
    	.range([innerHeight,0])
    	.nice();
    const xScale = d3.scaleBand()
    	.domain(data.map(xValue))
    	.range([0,innerWidth])
    	.padding(0.05);
    
    const g = selection.selectAll('.container').data([null]);
    const gEnter = g
      .enter().append('g')
        .attr('class', 'container');
    	gEnter
    		.merge(g)
      		.attr('transform', `translate(${margin.left},${margin.top})`);
    
    //const yAxisTickFormat = number =>
    	//d3.format('.3s')(number)
    			//.replace('G', 'B');
    
    //domain lines
    const xAxis = d3.axisBottom(xScale);
    
    const yAxis = d3.axisLeft(yScale);
    	// .tickFormat(yAxisTickFormat)
    
    //creating y axis lables
    const yAxisG = g.select('.y-axis');
    const yAxisGEnter = gEnter
  		.append('g')
    		.attr('class', 'y-axis');
    yAxisG
    	.merge(yAxisGEnter)
    	.transition().duration(1000)
  			.call(yAxis);
          
    const yAxisLabelText = yAxisGEnter
  		.append('text')
        .attr('class', 'axis-label')
        .attr('y', -50)
        .attr('fill', 'black')
        .attr('transform', `rotate(-90)`)
        .attr('text-anchor', 'middle')
    	.merge(yAxisG.select('.axis-label'))
    	  .attr('x', -innerHeight / 2)
        .text(yAxisLabel);
    
    //creating x axis lables
    const xAxisG = g.select('.x-axis');
    const xAxisGEnter = gEnter
  		.append('g')
    		.attr('class', 'x-axis');
    xAxisG
    	.merge(xAxisGEnter)
    		.attr('transform', `translate(0,${innerHeight})`)
  			.call(xAxis)
    		.selectAll('.domain').remove();
          
    const xAxisLabelText = xAxisGEnter
  		.append('text')
        .attr('class', 'axis-label')
        .attr('y', 55)
        .attr('fill', 'black')
        .attr('text-anchor', 'middle')
    	.merge(xAxisG.select('.axis-label'))
    	  .attr('x', innerWidth / 2)
        .text(xAxisLabel);
    
    //creating vis title
    gEnter.append('text')
        .attr('class', 'title')
        .attr('y', -30)
    		.attr('x', 80)
        .text(title);
    
  const rect = g.merge(gEnter)
    	.selectAll('rect').data(data);
    rect.enter().append('rect')
    	.merge(rect)
    		.transition().duration(1000)
  			.attr('x', d =>xScale(xValue(d)))
    		.attr('y', d =>yScale(yValue(d)))
    		.attr('width', xScale.bandwidth())
    		.attr('height', d=> innerHeight - yScale(yValue(d)));
  };

  const svg = d3.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');

  let data;
  let yColumn;
  const onYColumnClicked = column => {
    yColumn = column;
    render();
  };

  const render = () => {
    
    d3.select('#y-menu')
  	.call(dropdown_menu, {
    	options: ['fixed_acidity','volatile_acidity','citric_acid','residual_sugar','chlorides','free_sulfur_dioxide','pH','sulphates','alcohol','quality'],
      onOptionClicked: onYColumnClicked 
  });    
  	const titley = String(yColumn);
    const title_text = "White Wine Quality ranked by " + titley;
  	svg.call(bar, {
  		xAxisLabel: 'Quality',
      title: title_text,
  		yValue: d => d[yColumn],
      xValue: d => d.quality,
  		yAxisLabel: yColumn,
      margin: { top: 80, right: 100, bottom: 150, left: 100 },
      width,
      height,
      data
    });
    
  };

  d3.dsv(';','data.csv').then(loadedData => {
    data = loadedData;
    data.forEach(d => {
      d.fixed_acidity = +d.fixed_acidity;
        d.volatile_acidity = +d.volatile_acidity;
        d.citric_acid = +d.citric_acid;
        d.residual_sugar = +d.residual_sugar;
        d.chlorides = +d.chlorides;
        d.free_sulfur_dioxide = +d.free_sulfur_dioxide;
        d.density = +d.density;
        d.pH = +d.pH;
        d.sulphates = +d.sulphates;
        d.alcohol = +d.alcohol;
        d.quality = +d.quality;
    });
    yColumn = data.columns[0];
    render();
  });

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImRyb3Bkb3duX21lbnUuanMiLCJiYXIuanMiLCJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZHJvcGRvd25fbWVudSA9IChzZWxlY3Rpb24sIHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvcHRpb25zLFxuICAgIG9uT3B0aW9uQ2xpY2tlZFxuICB9ID0gcHJvcHM7XG4gIFxuICBsZXQgc2VsZWN0ID0gc2VsZWN0aW9uLnNlbGVjdEFsbCgnc2VsZWN0JykuZGF0YShbbnVsbF0pO1xuICBzZWxlY3QgPSBzZWxlY3QuZW50ZXIoKS5hcHBlbmQoJ3NlbGVjdCcpXG4gICAgLm1lcmdlKHNlbGVjdClcbiAgXHRcdC5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgXHRcdG9uT3B0aW9uQ2xpY2tlZCh0aGlzLnZhbHVlKTtcbiAgXHR9KTtcbiAgXG4gIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5zZWxlY3RBbGwoJ29wdGlvbicpLmRhdGEob3B0aW9ucyk7XG4gIG9wdGlvbi5lbnRlcigpLmFwcGVuZCgnb3B0aW9uJylcbiAgXHQubWVyZ2Uob3B0aW9uKVxuICBcdFx0LmF0dHIoJ3ZhbHVlJyxkID0+IGQpXG4gIFx0XHQudGV4dChkID0+IGQpO1xufTsiLCJleHBvcnQgY29uc3QgYmFyID0gKHNlbGVjdGlvbiwgcHJvcHMpID0+IHtcbiBjb25zdCB7XG4gICBtYXJnaW4sXG4gICBoZWlnaHQsXG4gICB3aWR0aCxcbiAgIGRhdGEsXG4gICB4VmFsdWUsXG4gICB5VmFsdWUsXG4gICB0aXRsZSxcbiAgIHhBeGlzTGFiZWwsXG4gICB5QXhpc0xhYmVsXG4gfSA9IHByb3BzO1xuICBcbiAgLy9zZXR0aW5nIHNpemUgb2YgY2hhcnQgZWxlbWVudFxuICBjb25zdCBpbm5lcldpZHRoID0gd2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgY29uc3QgaW5uZXJIZWlnaHQgPSBoZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgXG4gIC8vc29ydCBiYXJzIHZpYSBxdWFsaXR5IHJhbmtpbmdcbiAgZGF0YS5zb3J0KGZ1bmN0aW9uKGIsIGEpIHtcbiAgICByZXR1cm4gYi5xdWFsaXR5IC0gYS5xdWFsaXR5O1xuICB9KTtcbiAgXG4gIC8vZGVmaW5pbmcgc2NhbGVzXG4gIGNvbnN0IHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgXHQuZG9tYWluKFswLGQzLm1heChkYXRhLCB5VmFsdWUpXSlcbiAgXHQucmFuZ2UoW2lubmVySGVpZ2h0LDBdKVxuICBcdC5uaWNlKCk7XG4gIGNvbnN0IHhTY2FsZSA9IGQzLnNjYWxlQmFuZCgpXG4gIFx0LmRvbWFpbihkYXRhLm1hcCh4VmFsdWUpKVxuICBcdC5yYW5nZShbMCxpbm5lcldpZHRoXSlcbiAgXHQucGFkZGluZygwLjA1KTtcbiAgXG4gIGNvbnN0IGcgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKCcuY29udGFpbmVyJykuZGF0YShbbnVsbF0pO1xuICBjb25zdCBnRW50ZXIgPSBnXG4gICAgLmVudGVyKCkuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdjb250YWluZXInKTtcbiAgXHRnRW50ZXJcbiAgXHRcdC5tZXJnZShnKVxuICAgIFx0XHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xuICBcbiAgLy9jb25zdCB5QXhpc1RpY2tGb3JtYXQgPSBudW1iZXIgPT5cbiAgXHQvL2QzLmZvcm1hdCgnLjNzJykobnVtYmVyKVxuICBcdFx0XHQvLy5yZXBsYWNlKCdHJywgJ0InKTtcbiAgXG4gIC8vZG9tYWluIGxpbmVzXG4gIGNvbnN0IHhBeGlzID0gZDMuYXhpc0JvdHRvbSh4U2NhbGUpXG4gIFxuICBjb25zdCB5QXhpcyA9IGQzLmF4aXNMZWZ0KHlTY2FsZSlcbiAgXHQvLyAudGlja0Zvcm1hdCh5QXhpc1RpY2tGb3JtYXQpXG4gIFxuICAvL2NyZWF0aW5nIHkgYXhpcyBsYWJsZXNcbiAgY29uc3QgeUF4aXNHID0gZy5zZWxlY3QoJy55LWF4aXMnKTtcbiAgY29uc3QgeUF4aXNHRW50ZXIgPSBnRW50ZXJcblx0XHQuYXBwZW5kKCdnJylcbiAgXHRcdC5hdHRyKCdjbGFzcycsICd5LWF4aXMnKTtcbiAgeUF4aXNHXG4gIFx0Lm1lcmdlKHlBeGlzR0VudGVyKVxuICBcdC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMTAwMClcblx0XHRcdC5jYWxsKHlBeGlzKTtcbiAgICAgICAgXG4gIGNvbnN0IHlBeGlzTGFiZWxUZXh0ID0geUF4aXNHRW50ZXJcblx0XHQuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdheGlzLWxhYmVsJylcbiAgICAgIC5hdHRyKCd5JywgLTUwKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCAnYmxhY2snKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGByb3RhdGUoLTkwKWApXG4gICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgXHQubWVyZ2UoeUF4aXNHLnNlbGVjdCgnLmF4aXMtbGFiZWwnKSlcbiAgXHQgIC5hdHRyKCd4JywgLWlubmVySGVpZ2h0IC8gMilcbiAgICAgIC50ZXh0KHlBeGlzTGFiZWwpO1xuICBcbiAgLy9jcmVhdGluZyB4IGF4aXMgbGFibGVzXG4gIGNvbnN0IHhBeGlzRyA9IGcuc2VsZWN0KCcueC1heGlzJyk7XG4gIGNvbnN0IHhBeGlzR0VudGVyID0gZ0VudGVyXG5cdFx0LmFwcGVuZCgnZycpXG4gIFx0XHQuYXR0cignY2xhc3MnLCAneC1heGlzJyk7XG4gIHhBeGlzR1xuICBcdC5tZXJnZSh4QXhpc0dFbnRlcilcbiAgXHRcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYClcblx0XHRcdC5jYWxsKHhBeGlzKVxuICBcdFx0LnNlbGVjdEFsbCgnLmRvbWFpbicpLnJlbW92ZSgpO1xuICAgICAgICBcbiAgY29uc3QgeEF4aXNMYWJlbFRleHQgPSB4QXhpc0dFbnRlclxuXHRcdC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2F4aXMtbGFiZWwnKVxuICAgICAgLmF0dHIoJ3knLCA1NSlcbiAgICAgIC5hdHRyKCdmaWxsJywgJ2JsYWNrJylcbiAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICBcdC5tZXJnZSh4QXhpc0cuc2VsZWN0KCcuYXhpcy1sYWJlbCcpKVxuICBcdCAgLmF0dHIoJ3gnLCBpbm5lcldpZHRoIC8gMilcbiAgICAgIC50ZXh0KHhBeGlzTGFiZWwpO1xuICBcbiAgLy9jcmVhdGluZyB2aXMgdGl0bGVcbiAgZ0VudGVyLmFwcGVuZCgndGV4dCcpXG4gICAgICAuYXR0cignY2xhc3MnLCAndGl0bGUnKVxuICAgICAgLmF0dHIoJ3knLCAtMzApXG4gIFx0XHQuYXR0cigneCcsIDgwKVxuICAgICAgLnRleHQodGl0bGUpO1xuICBcbmNvbnN0IHJlY3QgPSBnLm1lcmdlKGdFbnRlcilcbiAgXHQuc2VsZWN0QWxsKCdyZWN0JykuZGF0YShkYXRhKVxuICByZWN0LmVudGVyKCkuYXBwZW5kKCdyZWN0JylcbiAgXHQubWVyZ2UocmVjdClcbiAgXHRcdC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMTAwMClcblx0XHRcdC5hdHRyKCd4JywgZCA9PnhTY2FsZSh4VmFsdWUoZCkpKVxuICBcdFx0LmF0dHIoJ3knLCBkID0+eVNjYWxlKHlWYWx1ZShkKSkpXG4gIFx0XHQuYXR0cignd2lkdGgnLCB4U2NhbGUuYmFuZHdpZHRoKCkpXG4gIFx0XHQuYXR0cignaGVpZ2h0JywgZD0+IGlubmVySGVpZ2h0IC0geVNjYWxlKHlWYWx1ZShkKSkpXG59XG4gIFxuICBcbiAgXG4gIFxuICBcbiAgIiwiaW1wb3J0IHsgZHJvcGRvd25fbWVudSB9IGZyb20gJy4vZHJvcGRvd25fbWVudSc7XG5pbXBvcnQgeyBiYXIgfSBmcm9tICcuL2Jhcic7XG5cbmNvbnN0IHN2ZyA9IGQzLnNlbGVjdCgnc3ZnJyk7XG5cbmNvbnN0IHdpZHRoID0gK3N2Zy5hdHRyKCd3aWR0aCcpO1xuY29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKTtcblxubGV0IGRhdGE7XG5sZXQgeUNvbHVtbjtcbmNvbnN0IG9uWUNvbHVtbkNsaWNrZWQgPSBjb2x1bW4gPT4ge1xuICB5Q29sdW1uID0gY29sdW1uO1xuICByZW5kZXIoKTtcbn07XG5cbmNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgXG4gIGQzLnNlbGVjdCgnI3ktbWVudScpXG5cdC5jYWxsKGRyb3Bkb3duX21lbnUsIHtcbiAgXHRvcHRpb25zOiBbJ2ZpeGVkX2FjaWRpdHknLCd2b2xhdGlsZV9hY2lkaXR5JywnY2l0cmljX2FjaWQnLCdyZXNpZHVhbF9zdWdhcicsJ2NobG9yaWRlcycsJ2ZyZWVfc3VsZnVyX2Rpb3hpZGUnLCdwSCcsJ3N1bHBoYXRlcycsJ2FsY29ob2wnLCdxdWFsaXR5J10sXG4gICAgb25PcHRpb25DbGlja2VkOiBvbllDb2x1bW5DbGlja2VkIFxufSk7ICAgIFxuXHRjb25zdCB0aXRsZXkgPSBTdHJpbmcoeUNvbHVtbilcbiAgY29uc3QgdGl0bGVfdGV4dCA9IFwiV2hpdGUgV2luZSBRdWFsaXR5IHJhbmtlZCBieSBcIiArIHRpdGxleVxuXHRzdmcuY2FsbChiYXIsIHtcblx0XHR4QXhpc0xhYmVsOiAnUXVhbGl0eScsXG4gICAgdGl0bGU6IHRpdGxlX3RleHQsXG5cdFx0eVZhbHVlOiBkID0+IGRbeUNvbHVtbl0sXG4gICAgeFZhbHVlOiBkID0+IGQucXVhbGl0eSxcblx0XHR5QXhpc0xhYmVsOiB5Q29sdW1uLFxuICAgIG1hcmdpbjogeyB0b3A6IDgwLCByaWdodDogMTAwLCBib3R0b206IDE1MCwgbGVmdDogMTAwIH0sXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIGRhdGFcbiAgfSk7XG4gIFxufTtcblxuZDMuZHN2KCc7JywnZGF0YS5jc3YnKS50aGVuKGxvYWRlZERhdGEgPT4ge1xuICBkYXRhID0gbG9hZGVkRGF0YTtcbiAgZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgIGQuZml4ZWRfYWNpZGl0eSA9ICtkLmZpeGVkX2FjaWRpdHk7XG4gICAgICBkLnZvbGF0aWxlX2FjaWRpdHkgPSArZC52b2xhdGlsZV9hY2lkaXR5O1xuICAgICAgZC5jaXRyaWNfYWNpZCA9ICtkLmNpdHJpY19hY2lkO1xuICAgICAgZC5yZXNpZHVhbF9zdWdhciA9ICtkLnJlc2lkdWFsX3N1Z2FyO1xuICAgICAgZC5jaGxvcmlkZXMgPSArZC5jaGxvcmlkZXM7XG4gICAgICBkLmZyZWVfc3VsZnVyX2Rpb3hpZGUgPSArZC5mcmVlX3N1bGZ1cl9kaW94aWRlO1xuICAgICAgZC5kZW5zaXR5ID0gK2QuZGVuc2l0eTtcbiAgICAgIGQucEggPSArZC5wSDtcbiAgICAgIGQuc3VscGhhdGVzID0gK2Quc3VscGhhdGVzO1xuICAgICAgZC5hbGNvaG9sID0gK2QuYWxjb2hvbDtcbiAgICAgIGQucXVhbGl0eSA9ICtkLnF1YWxpdHk7XG4gIH0pO1xuICB5Q29sdW1uID0gZGF0YS5jb2x1bW5zWzBdXG4gIHJlbmRlcigpO1xufSk7Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztFQUFPLE1BQU0sYUFBYSxHQUFHLENBQUMsU0FBUyxFQUFFLEtBQUssS0FBSztFQUNuRCxFQUFFLE1BQU07RUFDUixJQUFJLE9BQU87RUFDWCxJQUFJLGVBQWU7RUFDbkIsR0FBRyxHQUFHLEtBQUssQ0FBQztFQUNaO0VBQ0EsRUFBRSxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDMUQsRUFBRSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7RUFDMUMsS0FBSyxLQUFLLENBQUMsTUFBTSxDQUFDO0VBQ2xCLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxXQUFXO0VBQzdCLE1BQU0sZUFBZSxDQUFDLElBQUksQ0FBQyxL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