(function () {
  'use strict';

  const dropdown_menu = (selection, props) => {
    const {
      options,
      onOptionClicked
    } = props;
    
    let select = selection.selectAll('select').data([null]);
    select = select.enter().append('select')
      .merge(select)
    		.on('change', function() {
      		onOptionClicked(this.value);
    	});
    
    const option = select.selectAll('option').data(options);
    option.enter().append('option')
    	.merge(option)
    		.attr('value',d => d)
    		.text(d => d);
  };

  const bar = (selection, props) => {
   const {
     margin,
     height,
     width,
     data,
     xValue,
     yValue,
     title,
     xAxisLabel,
     yAxisLabel,
     wine_type
   } = props;
    
    //filtering by wine type
    let filtered_data;
    if (wine_type === 'White Wine') {
      filtered_data = data.filter(d => d.wine_type === 'white');
    } else {
        filtered_data = data.filter(d => d.wine_type === 'red');
      }
    
    //setting size of chart element
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    //sort bars via quality ranking
    filtered_data.sort(function(b, a) {
      return b.quality - a.quality;
    });
    
    //defining scales
    const yScale = d3.scaleLinear()
    	.domain([0,d3.max(filtered_data, yValue)])
    	.range([innerHeight,0])
    	.nice();
    const xScale = d3.scaleBand()
    	.domain(filtered_data.map(xValue))
    	.range([0,innerWidth])
    	.padding(0.05);
    
    const g = selection.selectAll('.container').data([null]);
    const gEnter = g
      .enter().append('g')
        .attr('class', 'container');
    	gEnter
    		.merge(g)
      		.attr('transform', `translate(${margin.left},${margin.top})`);
    
    //const yAxisTickFormat = number =>
    	//d3.format('.3s')(number)
    			//.replace('G', 'B');
    
    //domain lines
    const xAxis = d3.axisBottom(xScale);
    
    const yAxis = d3.axisLeft(yScale);
    	// .tickFormat(yAxisTickFormat)
    
    //creating y axis lables
    const yAxisG = g.select('.y-axis');
    const yAxisGEnter = gEnter
  		.append('g')
    		.attr('class', 'y-axis');
    yAxisG
    	.merge(yAxisGEnter)
    	.transition().duration(1000)
  			.call(yAxis);
          
    const yAxisLabelText = yAxisGEnter
  		.append('text')
        .attr('class', 'axis-label')
        .attr('y', -50)
        .attr('fill', 'black')
        .attr('transform', `rotate(-90)`)
        .attr('text-anchor', 'middle')
    	.merge(yAxisG.select('.axis-label'))
    	  .attr('x', -innerHeight / 2)
        .text(yAxisLabel);
    
    //creating x axis lables
    const xAxisG = g.select('.x-axis');
    const xAxisGEnter = gEnter
  		.append('g')
    		.attr('class', 'x-axis');
    xAxisG
    	.merge(xAxisGEnter)
    		.attr('transform', `translate(0,${innerHeight})`)
  			.call(xAxis)
    		.selectAll('.domain').remove();
          
    const xAxisLabelText = xAxisGEnter
  		.append('text')
        .attr('class', 'axis-label')
        .attr('y', 55)
        .attr('fill', 'black')
        .attr('text-anchor', 'middle')
    	.merge(xAxisG.select('.axis-label'))
    	  .attr('x', innerWidth / 2)
        .text(xAxisLabel);
    
    //creating vis title
    gEnter.append('text')
        .attr('class', 'title')
        .attr('y', -30)
    		.attr('x', 80)
        .text(title);
    
  const rect = g.merge(gEnter)
    	.selectAll('rect').data(filtered_data);
    rect.enter().append('rect')
    	.merge(rect)
    		.transition().duration(1000)
  			.attr('x', d =>xScale(xValue(d)))
    		.attr('y', d =>yScale(yValue(d)))
    		.attr('width', xScale.bandwidth())
    		.attr('height', d=> innerHeight - yScale(yValue(d)));
  };

  const svg = d3.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');
        

  let data;

  let yColumn;
  let wine_type;

  const onYColumnClicked = column => {
    yColumn = column;
    render();
  };

  const onDatasetClicked = column => {
    wine_type = column;
    render();
  };

  const render = () => {

    d3.select('#y-menu')
  	.call(dropdown_menu, {
    	options: ['fixed_acidity','volatile_acidity','citric_acid','residual_sugar','chlorides','free_sulfur_dioxide','pH','sulphates','alcohol','quality'],
      onOptionClicked: onYColumnClicked 
  });    
    
    d3.select('#data-menu')
      .call(dropdown_menu, {
        options: ['White Wine','Red Wine'],
        onOptionClicked: onDatasetClicked
      });

  	const titley = String(yColumn);
    const title_text = "White Wine Quality ranked by " + titley;
  	svg.call(bar, {
  		xAxisLabel: 'Quality',
      title: title_text,
  		yValue: d => d[yColumn],
      xValue: d => d.quality,
  		yAxisLabel: yColumn,
      margin: { top: 80, right: 100, bottom: 150, left: 100 },
      width,
      height,
      wine_type,
      data
    });

  };
  d3.csv('data_wine.csv').then(loadedData => {
    data = loadedData;
    data.forEach(d => {
      d.fixed_acidity = +d.fixed_acidity;
        d.volatile_acidity = +d.volatile_acidity;
        d.citric_acid = +d.citric_acid;
        d.residual_sugar = +d.residual_sugar;
        d.chlorides = +d.chlorides;
        d.free_sulfur_dioxide = +d.free_sulfur_dioxide;
        d.density = +d.density;
        d.pH = +d.pH;
        d.sulphates = +d.sulphates;
        d.alcohol = +d.alcohol;
        d.quality = +d.quality;
      	d.wine_type = d.wine_type;
    });
    yColumn = data.columns[0];
    wine_type = 'White Wine';
    render();

  });

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,