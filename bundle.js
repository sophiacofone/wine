(function () {
  'use strict';

  const dropdown_menu = (selection, props) => {
    const {
      options,
      onOptionClicked
    } = props;
    
    let select = selection.selectAll('select').data([null]);
    select = select.enter().append('select')
      .merge(select)
    		.on('change', function() {
      		onOptionClicked(this.value);
    	});
    
    const option = select.selectAll('option').data(options);
    option.enter().append('option')
    	.merge(option)
    		.attr('value',d => d)
    		.text(d => d);
  };

  const bar = (selection, props) => {
   const {
     margin,
     height,
     width,
     data,
     xValue,
     yValue,
     title,
     xAxisLabel,
     yAxisLabel,
     wine_type,
     titleLabel
   } = props;
    
    //filtering by wine type
    let filtered_data;
    if (wine_type === 'White Wine') {
      filtered_data = data.filter(d => d.wine_type === 'white');
    } else {
        filtered_data = data.filter(d => d.wine_type === 'red');
      }
    
    //setting size of chart element
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    //sort bars via quality ranking
    filtered_data.sort(function(b, a) {
      return b.quality - a.quality;
    });
    
    //defining scales
    const yScale = d3.scaleLinear()
    	.domain([0,d3.max(filtered_data, yValue)])
    	.range([innerHeight,0])
    	.nice();
    const xScale = d3.scaleBand()
    	.domain(filtered_data.map(xValue))
    	.range([0,innerWidth])
    	.padding(0.05);
    
    const g = selection.selectAll('.container').data([null]);
    const gEnter = g
      .enter().append('g')
        .attr('class', 'container');
    	gEnter
    		.merge(g)
      		.attr('transform', `translate(${margin.left},${margin.top})`);
    
    //const yAxisTickFormat = number =>
    	//d3.format('.3s')(number)
    			//.replace('G', 'B');
    
    //domain lines
    const xAxis = d3.axisBottom(xScale);
    
    const yAxis = d3.axisLeft(yScale);
    	// .tickFormat(yAxisTickFormat)
    
    //creating y axis lables
    const yAxisG = g.select('.y-axis');
    const yAxisGEnter = gEnter
  		.append('g')
    		.attr('class', 'y-axis');
    yAxisG
    	.merge(yAxisGEnter)
    	.transition().duration(1000)
  			.call(yAxis);
          
    const yAxisLabelText = yAxisGEnter
  		.append('text')
        .attr('class', 'axis-label')
        .attr('y', -50)
        .attr('fill', 'black')
        .attr('transform', `rotate(-90)`)
        .attr('text-anchor', 'middle')
    	.merge(yAxisG.select('.axis-label'))
    	  .attr('x', -innerHeight / 2)
        .text(yAxisLabel);
    
    //creating x axis lables
    const xAxisG = g.select('.x-axis');
    const xAxisGEnter = gEnter
  		.append('g')
    		.attr('class', 'x-axis');
    xAxisG
    	.merge(xAxisGEnter)
    		.attr('transform', `translate(0,${innerHeight})`)
  			.call(xAxis)
    		.selectAll('.domain').remove();
          
    const xAxisLabelText = xAxisGEnter
  		.append('text')
        .attr('class', 'axis-label')
        .attr('y', 55)
        .attr('fill', 'black')
        .attr('text-anchor', 'middle')
    	.merge(xAxisG.select('.axis-label'))
    	  .attr('x', innerWidth / 2)
        .text(xAxisLabel);
    
    //creating vis title
    const titleG = g.select('.title');
    const titleGEnter = gEnter
  		.append('g')
    		.attr('class', 'title');
    titleG
    	.merge(titleGEnter)
    	.transition().duration(1000);
          
    const titleText = titleGEnter
  		.append('text')
        .attr('class', 'title')
        .attr('y', -30)
    		.attr('x', 80)
    	.merge(titleG.select('.title'))
        .text(titleLabel);
    
  const rect = g.merge(gEnter)
    	.selectAll('rect').data(filtered_data);
    rect
      .enter().append('rect')
    	.merge(rect)
    		.transition().duration(1000)
  			.attr('x', d =>xScale(xValue(d)))
    		.attr('y', d =>yScale(yValue(d)))
    		.attr('width', xScale.bandwidth())
    		.attr('height', d=> innerHeight - yScale(yValue(d)));
  };

  const svg = d3.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');
        

  let data;

  let yColumn;
  let wine_type;

  const onYColumnClicked = column => {
    yColumn = column;
    render();
  };

  const onDatasetClicked = column => {
    wine_type = column;
    render();
  };

  const render = () => {

    d3.select('#y-menu')
  	.call(dropdown_menu, {
    	options: ['fixed_acidity','volatile_acidity','citric_acid','residual_sugar','chlorides','free_sulfur_dioxide','pH','sulphates','alcohol','quality'],
      onOptionClicked: onYColumnClicked 
  });    
    
    d3.select('#data-menu')
      .call(dropdown_menu, {
        options: ['White Wine','Red Wine'],
        onOptionClicked: onDatasetClicked
      });

    svg.call(bar, {
  		xAxisLabel: 'Quality',
      titleLabel: "White Wine Quality ranked by " + yColumn,
  		yValue: d => d[yColumn],
      xValue: d => d.quality,
  		yAxisLabel: yColumn,
      margin: { top: 80, right: 100, bottom: 150, left: 100 },
      width,
      height,
      wine_type,
      data
    });

  };
  d3.csv('data_wine.csv').then(loadedData => {
    data = loadedData;
    data.forEach(d => {
      d.fixed_acidity = +d.fixed_acidity;
        d.volatile_acidity = +d.volatile_acidity;
        d.citric_acid = +d.citric_acid;
        d.residual_sugar = +d.residual_sugar;
        d.chlorides = +d.chlorides;
        d.free_sulfur_dioxide = +d.free_sulfur_dioxide;
        d.density = +d.density;
        d.pH = +d.pH;
        d.sulphates = +d.sulphates;
        d.alcohol = +d.alcohol;
        d.quality = +d.quality;
      	d.wine_type = d.wine_type;
    });
    yColumn = 'fixed_acidity';
    wine_type = 'White Wine';
    render();

  });

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImRyb3Bkb3duX21lbnUuanMiLCJiYXIuanMiLCJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZHJvcGRvd25fbWVudSA9IChzZWxlY3Rpb24sIHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvcHRpb25zLFxuICAgIG9uT3B0aW9uQ2xpY2tlZFxuICB9ID0gcHJvcHM7XG4gIFxuICBsZXQgc2VsZWN0ID0gc2VsZWN0aW9uLnNlbGVjdEFsbCgnc2VsZWN0JykuZGF0YShbbnVsbF0pO1xuICBzZWxlY3QgPSBzZWxlY3QuZW50ZXIoKS5hcHBlbmQoJ3NlbGVjdCcpXG4gICAgLm1lcmdlKHNlbGVjdClcbiAgXHRcdC5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgXHRcdG9uT3B0aW9uQ2xpY2tlZCh0aGlzLnZhbHVlKTtcbiAgXHR9KTtcbiAgXG4gIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5zZWxlY3RBbGwoJ29wdGlvbicpLmRhdGEob3B0aW9ucyk7XG4gIG9wdGlvbi5lbnRlcigpLmFwcGVuZCgnb3B0aW9uJylcbiAgXHQubWVyZ2Uob3B0aW9uKVxuICBcdFx0LmF0dHIoJ3ZhbHVlJyxkID0+IGQpXG4gIFx0XHQudGV4dChkID0+IGQpO1xufTsiLCJleHBvcnQgY29uc3QgYmFyID0gKHNlbGVjdGlvbiwgcHJvcHMpID0+IHtcbiBjb25zdCB7XG4gICBtYXJnaW4sXG4gICBoZWlnaHQsXG4gICB3aWR0aCxcbiAgIGRhdGEsXG4gICB4VmFsdWUsXG4gICB5VmFsdWUsXG4gICB0aXRsZSxcbiAgIHhBeGlzTGFiZWwsXG4gICB5QXhpc0xhYmVsLFxuICAgd2luZV90eXBlLFxuICAgdGl0bGVMYWJlbFxuIH0gPSBwcm9wcztcbiAgXG4gIC8vZmlsdGVyaW5nIGJ5IHdpbmUgdHlwZVxuICBsZXQgZmlsdGVyZWRfZGF0YTtcbiAgaWYgKHdpbmVfdHlwZSA9PT0gJ1doaXRlIFdpbmUnKSB7XG4gICAgZmlsdGVyZWRfZGF0YSA9IGRhdGEuZmlsdGVyKGQgPT4gZC53aW5lX3R5cGUgPT09ICd3aGl0ZScpXG4gIH0gZWxzZSB7XG4gICAgICBmaWx0ZXJlZF9kYXRhID0gZGF0YS5maWx0ZXIoZCA9PiBkLndpbmVfdHlwZSA9PT0gJ3JlZCcpXG4gICAgfVxuICBcbiAgLy9zZXR0aW5nIHNpemUgb2YgY2hhcnQgZWxlbWVudFxuICBjb25zdCBpbm5lcldpZHRoID0gd2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgY29uc3QgaW5uZXJIZWlnaHQgPSBoZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgXG4gIC8vc29ydCBiYXJzIHZpYSBxdWFsaXR5IHJhbmtpbmdcbiAgZmlsdGVyZWRfZGF0YS5zb3J0KGZ1bmN0aW9uKGIsIGEpIHtcbiAgICByZXR1cm4gYi5xdWFsaXR5IC0gYS5xdWFsaXR5O1xuICB9KTtcbiAgXG4gIC8vZGVmaW5pbmcgc2NhbGVzXG4gIGNvbnN0IHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgXHQuZG9tYWluKFswLGQzLm1heChmaWx0ZXJlZF9kYXRhLCB5VmFsdWUpXSlcbiAgXHQucmFuZ2UoW2lubmVySGVpZ2h0LDBdKVxuICBcdC5uaWNlKCk7XG4gIGNvbnN0IHhTY2FsZSA9IGQzLnNjYWxlQmFuZCgpXG4gIFx0LmRvbWFpbihmaWx0ZXJlZF9kYXRhLm1hcCh4VmFsdWUpKVxuICBcdC5yYW5nZShbMCxpbm5lcldpZHRoXSlcbiAgXHQucGFkZGluZygwLjA1KTtcbiAgXG4gIGNvbnN0IGcgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKCcuY29udGFpbmVyJykuZGF0YShbbnVsbF0pO1xuICBjb25zdCBnRW50ZXIgPSBnXG4gICAgLmVudGVyKCkuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdjb250YWluZXInKTtcbiAgXHRnRW50ZXJcbiAgXHRcdC5tZXJnZShnKVxuICAgIFx0XHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xuICBcbiAgLy9jb25zdCB5QXhpc1RpY2tGb3JtYXQgPSBudW1iZXIgPT5cbiAgXHQvL2QzLmZvcm1hdCgnLjNzJykobnVtYmVyKVxuICBcdFx0XHQvLy5yZXBsYWNlKCdHJywgJ0InKTtcbiAgXG4gIC8vZG9tYWluIGxpbmVzXG4gIGNvbnN0IHhBeGlzID0gZDMuYXhpc0JvdHRvbSh4U2NhbGUpXG4gIFxuICBjb25zdCB5QXhpcyA9IGQzLmF4aXNMZWZ0KHlTY2FsZSlcbiAgXHQvLyAudGlja0Zvcm1hdCh5QXhpc1RpY2tGb3JtYXQpXG4gIFxuICAvL2NyZWF0aW5nIHkgYXhpcyBsYWJsZXNcbiAgY29uc3QgeUF4aXNHID0gZy5zZWxlY3QoJy55LWF4aXMnKTtcbiAgY29uc3QgeUF4aXNHRW50ZXIgPSBnRW50ZXJcblx0XHQuYXBwZW5kKCdnJylcbiAgXHRcdC5hdHRyKCdjbGFzcycsICd5LWF4aXMnKTtcbiAgeUF4aXNHXG4gIFx0Lm1lcmdlKHlBeGlzR0VudGVyKVxuICBcdC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMTAwMClcblx0XHRcdC5jYWxsKHlBeGlzKTtcbiAgICAgICAgXG4gIGNvbnN0IHlBeGlzTGFiZWxUZXh0ID0geUF4aXNHRW50ZXJcblx0XHQuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdheGlzLWxhYmVsJylcbiAgICAgIC5hdHRyKCd5JywgLTUwKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCAnYmxhY2snKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGByb3RhdGUoLTkwKWApXG4gICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgXHQubWVyZ2UoeUF4aXNHLnNlbGVjdCgnLmF4aXMtbGFiZWwnKSlcbiAgXHQgIC5hdHRyKCd4JywgLWlubmVySGVpZ2h0IC8gMilcbiAgICAgIC50ZXh0KHlBeGlzTGFiZWwpO1xuICBcbiAgLy9jcmVhdGluZyB4IGF4aXMgbGFibGVzXG4gIGNvbnN0IHhBeGlzRyA9IGcuc2VsZWN0KCcueC1heGlzJyk7XG4gIGNvbnN0IHhBeGlzR0VudGVyID0gZ0VudGVyXG5cdFx0LmFwcGVuZCgnZycpXG4gIFx0XHQuYXR0cignY2xhc3MnLCAneC1heGlzJyk7XG4gIHhBeGlzR1xuICBcdC5tZXJnZSh4QXhpc0dFbnRlcilcbiAgXHRcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYClcblx0XHRcdC5jYWxsKHhBeGlzKVxuICBcdFx0LnNlbGVjdEFsbCgnLmRvbWFpbicpLnJlbW92ZSgpO1xuICAgICAgICBcbiAgY29uc3QgeEF4aXNMYWJlbFRleHQgPSB4QXhpc0dFbnRlclxuXHRcdC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2F4aXMtbGFiZWwnKVxuICAgICAgLmF0dHIoJ3knLCA1NSlcbiAgICAgIC5hdHRyKCdmaWxsJywgJ2JsYWNrJylcbiAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICBcdC5tZXJnZSh4QXhpc0cuc2VsZWN0KCcuYXhpcy1sYWJlbCcpKVxuICBcdCAgLmF0dHIoJ3gnLCBpbm5lcldpZHRoIC8gMilcbiAgICAgIC50ZXh0KHhBeGlzTGFiZWwpO1xuICBcbiAgLy9jcmVhdGluZyB2aXMgdGl0bGVcbiAgY29uc3QgdGl0bGVHID0gZy5zZWxlY3QoJy50aXRsZScpO1xuICBjb25zdCB0aXRsZUdFbnRlciA9IGdFbnRlclxuXHRcdC5hcHBlbmQoJ2cnKVxuICBcdFx0LmF0dHIoJ2NsYXNzJywgJ3RpdGxlJyk7XG4gIHRpdGxlR1xuICBcdC5tZXJnZSh0aXRsZUdFbnRlcilcbiAgXHQudHJhbnNpdGlvbigpLmR1cmF0aW9uKDEwMDApXG4gICAgICAgIFxuICBjb25zdCB0aXRsZVRleHQgPSB0aXRsZUdFbnRlclxuXHRcdC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3RpdGxlJylcbiAgICAgIC5hdHRyKCd5JywgLTMwKVxuICBcdFx0LmF0dHIoJ3gnLCA4MClcbiAgXHQubWVyZ2UodGl0bGVHLnNlbGVjdCgnLnRpdGxlJykpXG4gICAgICAudGV4dCh0aXRsZUxhYmVsKTtcbiAgXG5jb25zdCByZWN0ID0gZy5tZXJnZShnRW50ZXIpXG4gIFx0LnNlbGVjdEFsbCgncmVjdCcpLmRhdGEoZmlsdGVyZWRfZGF0YSk7XG4gIHJlY3RcbiAgICAuZW50ZXIoKS5hcHBlbmQoJ3JlY3QnKVxuICBcdC5tZXJnZShyZWN0KVxuICBcdFx0LnRyYW5zaXRpb24oKS5kdXJhdGlvbigxMDAwKVxuXHRcdFx0LmF0dHIoJ3gnLCBkID0+eFNjYWxlKHhWYWx1ZShkKSkpXG4gIFx0XHQuYXR0cigneScsIGQgPT55U2NhbGUoeVZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKCd3aWR0aCcsIHhTY2FsZS5iYW5kd2lkdGgoKSlcbiAgXHRcdC5hdHRyKCdoZWlnaHQnLCBkPT4gaW5uZXJIZWlnaHQgLSB5U2NhbGUoeVZhbHVlKGQpKSlcbn1cbiAgXG4gIFxuICBcbiAgXG4gIFxuICAiLCJpbXBvcnQgeyBkcm9wZG93bl9tZW51IH0gZnJvbSAnLi9kcm9wZG93bl9tZW51JztcbmltcG9ydCB7IGJhciB9IGZyb20gJy4vYmFyJztcblxuY29uc3Qgc3ZnID0gZDMuc2VsZWN0KCdzdmcnKTtcblxuY29uc3Qgd2lkdGggPSArc3ZnLmF0dHIoJ3dpZHRoJyk7XG5jb25zdCBoZWlnaHQgPSArc3ZnLmF0dHIoJ2hlaWdodCcpO1xuICAgICAgXG5cbmxldCBkYXRhO1xuXG5sZXQgeUNvbHVtbjtcbmxldCB3aW5lX3R5cGU7XG5cbmNvbnN0IG9uWUNvbHVtbkNsaWNrZWQgPSBjb2x1bW4gPT4ge1xuICB5Q29sdW1uID0gY29sdW1uO1xuICByZW5kZXIoKTtcbn07XG5cbmNvbnN0IG9uRGF0YXNldENsaWNrZWQgPSBjb2x1bW4gPT4ge1xuICB3aW5lX3R5cGUgPSBjb2x1bW47XG4gIHJlbmRlcigpO1xufTtcblxuY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuXG4gIGQzLnNlbGVjdCgnI3ktbWVudScpXG5cdC5jYWxsKGRyb3Bkb3duX21lbnUsIHtcbiAgXHRvcHRpb25zOiBbJ2ZpeGVkX2FjaWRpdHknLCd2b2xhdGlsZV9hY2lkaXR5JywnY2l0cmljX2FjaWQnLCdyZXNpZHVhbF9zdWdhcicsJ2NobG9yaWRlcycsJ2ZyZWVfc3VsZnVyX2Rpb3hpZGUnLCdwSCcsJ3N1bHBoYXRlcycsJ2FsY29ob2wnLCdxdWFsaXR5J10sXG4gICAgb25PcHRpb25DbGlja2VkOiBvbllDb2x1bW5DbGlja2VkIFxufSk7ICAgIFxuICBcbiAgZDMuc2VsZWN0KCcjZGF0YS1tZW51JylcbiAgICAuY2FsbChkcm9wZG93bl9tZW51LCB7XG4gICAgICBvcHRpb25zOiBbJ1doaXRlIFdpbmUnLCdSZWQgV2luZSddLFxuICAgICAgb25PcHRpb25DbGlja2VkOiBvbkRhdGFzZXRDbGlja2VkXG4gICAgfSk7XG5cdFxuICBjb25zdCB0aXRsZXkgPSBTdHJpbmcoeUNvbHVtbilcblxuICBzdmcuY2FsbChiYXIsIHtcblx0XHR4QXhpc0xhYmVsOiAnUXVhbGl0eScsXG4gICAgdGl0bGVMYWJlbDogXCJXaGl0ZSBXaW5lIFF1YWxpdHkgcmFua2VkIGJ5IFwiICsgeUNvbHVtbixcblx0XHR5VmFsdWU6IGQgPT4gZFt5Q29sdW1uXSxcbiAgICB4VmFsdWU6IGQgPT4gZC5xdWFsaXR5LFxuXHRcdHlBeGlzTGFiZWw6IHlDb2x1bW4sXG4gICAgbWFyZ2luOiB7IHRvcDogODAsIHJpZ2h0OiAxMDAsIGJvdHRvbTogMTUwLCBsZWZ0OiAxMDAgfSxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgd2luZV90eXBlLFxuICAgIGRhdGFcbiAgfSk7XG5cbn07XG5kMy5jc3YoJ2RhdGFfd2luZS5jc3YnKS50aGVuKGxvYWRlZERhdGEgPT4ge1xuICBkYXRhID0gbG9hZGVkRGF0YTtcbiAgZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgIGQuZml4ZWRfYWNpZGl0eSA9ICtkLmZpeGVkX2FjaWRpdHk7XG4gICAgICBkLnZvbGF0aWxlX2FjaWRpdHkgPSArZC52b2xhdGlsZV9hY2lkaXR5O1xuICAgICAgZC5jaXRyaWNfYWNpZCA9ICtkLmNpdHJpY19hY2lkO1xuICAgICAgZC5yZXNpZHVhbF9zdWdhciA9ICtkLnJlc2lkdWFsX3N1Z2FyO1xuICAgICAgZC5jaGxvcmlkZXMgPSArZC5jaGxvcmlkZXM7XG4gICAgICBkLmZyZWVfc3VsZnVyX2Rpb3hpZGUgPSArZC5mcmVlX3N1bGZ1cl9kaW94aWRlO1xuICAgICAgZC5kZW5zaXR5ID0gK2QuZGVuc2l0eTtcbiAgICAgIGQucEggPSArZC5wSDtcbiAgICAgIGQuc3VscGhhdGVzID0gK2Quc3VscGhhdGVzO1xuICAgICAgZC5hbGNvaG9sID0gK2QuYWxjb2hvbDtcbiAgICAgIGQucXVhbGl0eSA9ICtkLnF1YWxpdHk7XG4gICAgXHRkLndpbmVfdHlwZSA9IGQud2luZV90eXBlO1xuICB9KTtcbiAgeUNvbHVtbiA9ICdmaXhlZF9hY2lkaXR5J1xuICB3aW5lX3R5cGUgPSAnV2hpdGUgV2luZSdcbiAgcmVuZGVyKCk7XG5cbn0pOyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7RUFBTyxNQUFNLGFBQWEsR0FBRyxDQUFDLFNBQVMsRUFBRSxLQUFLLEtBQUs7RUFDbkQsRUFBRSxNQUFNO0VBQ1IsSUFBSSxPQUFPO0VBQ1gsSUFBSSxlQUFlO0VBQ25CLEdBQUcsR0FBRyxLQUFLLENBQUM7RUFDWjtFQUNBLEVBQUUsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzFELEVBQUUsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO0VBQzFDLEtBQUssS0FBSyxDQUFDLE1BQU0sQ0FBQztFQUNsQixLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsV0FBVztFQUM3QixNQUFNLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFD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